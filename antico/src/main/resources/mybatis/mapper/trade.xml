<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.app.trade.model.TradeDAO">
	
	<!-- 구매를 하면 포인트를 차감하기 -->
	<update id="deductPoint" parameterType="String">
		update tbl_member set member_point = member_point - #{product_price}
		where pk_member_no = #{pk_member_no}
	</update>
	
	<!-- 상품상태를 예약중으로 변경하기 -->
	<update id="holdProduct" parameterType="String">
		update tbl_product set product_sale_status = 1
		where pk_product_no = #{pk_product_no}
	</update>
	
	<!-- 포인트내역에 사용정보 insert -->
	<insert id="usePoint" parameterType="String">
		insert into tbl_point_history (pk_point_history_no, fk_member_no, point_history_reason, point_history_point, point_history_point_before, point_history_point_after, point_history_regdate)
		values (point_history_seq.nextval, #{pk_member_no}, #{reason}, #{product_price}, #{member_point}, #{member_point}-#{product_price}, sysdate)
	</insert>

	<!-- 거래테이블에 거래정보들 insert -->
	<insert id="trade" parameterType="String">
		insert into tbl_trade (pk_trade_no, fk_seller_no, fk_consumer_no, fk_product_no, trade_status, trade_pending_date)
		values (tra_seq.nextval, #{member_no}, #{pk_member_no}, #{pk_product_no}, 1, sysdate)
	</insert>
	
	<!-- 판매자 포인트 증가 업데이트 -->
	<update id="plusPoint">
		update tbl_member set member_point = member_point + #{product_price}
		where pk_member_no = #{fk_member_no}
	</update>
	
	<!-- 판매상태를 구매확정으로 업데이트 -->
	<update id="completedProduct">
		update tbl_product set product_sale_status = 2
		where pk_product_no = #{pk_product_no}
	</update>
	
	<!-- 구매상태를 결제확정으로 업데이트 -->
	<update id="completedTrade">
		update tbl_trade set trade_status = 2, trade_confirm_date = sysdate
		where fk_product_no = #{pk_product_no}
	</update>
	
	<select id="purchaseSelect" parameterType="String" resultType="String">
		select pk_trade_no
		from (
		    select pk_trade_no
		    from tbl_trade
		    where fk_product_no = #{pk_product_no} 
		      and fk_consumer_no = #{pk_member_no}
		    order by pk_trade_no desc
		)
		where rownum = 1
	</select>
	
	<select id="canceled" parameterType="String" resultType="String">
		select pk_trade_no
		from tbl_trade
		where fk_product_no = #{pk_product_no} and fk_consumer_no = #{pk_member_no} and trade_status = 1
	</select>

	<!--상품 일련번호를 통한 거래내역 조회-->
	<select id="selectTradeByProductNo" parameterType="String" resultType="TradeVO">
		select pk_trade_no, fk_seller_no, fk_consumer_no, fk_product_no, trade_status, trade_cancel_date, trade_pending_date, trade_confirm_date
		from tbl_trade
		where fk_product_no = #{pk_product_no}
	</select>
	
	<select id="statusCheck" parameterType="String" resultType="String">
		select trade_status
		from tbl_trade
		where pk_trade_no = #{pk_trade_no}
	</select>
	
	<!-- 구매취소시 포인트를 돌려주기 -->
	<update id="returnPoint" parameterType="String">
		update tbl_member set member_point = member_point + #{product_price}
		where pk_member_no = #{pk_member_no}
	</update>
	
	<!-- 구매취소시 상품상태를 판매중으로 변경하기 -->
	<update id="onSell" parameterType="String">
		update tbl_product set product_sale_status = 0
		where pk_product_no = #{pk_product_no}
	</update>
	
	<!-- 포인트내역에 사용정보 insert -->
	<insert id="cancelData" parameterType="String">
		insert into tbl_point_history (pk_point_history_no, fk_member_no, point_history_reason, point_history_point, point_history_point_before, point_history_point_after, point_history_regdate)
		values (point_history_seq.nextval, #{pk_member_no}, #{reason}, #{product_price}, #{member_point}, #{member_point}+#{product_price}, sysdate)
	</insert>
	
	<update id="buyCancel">
		update tbl_trade set trade_status = 0, trade_cancel_date = sysdate
		where pk_trade_no = #{pk_trade_no}
	</update>
	
	<select id="productSaleStatus" parameterType="String">
		select product_sale_status
		from tbl_product
		where pk_product_no = #{pk_product_no}
	</select>
	
</mapper>
